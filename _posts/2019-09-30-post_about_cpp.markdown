---
layout: page
title:  "Полезные знания о C++"
categories: Jekyll
---
Всем привет. В данной статье мы рассмотрим полезные вещи, которые можно реализовать на языке C++. Такие знания, как ускорение ввода - вывода могут помочь в решении олимпиадных задач.

## Препроцессорные директивы
Для начала разберемся с тем, что такое препроцессор. **Препроцессор** в языке C/C++ это программа, подготавливающая исходный код вашей программы к компиляции. В данном случае нас больше всего интересует вставка содержимого файла #include, макроподстановки #define и условная компиляция #ifdef, #endif.

{% highlight cpp %}
#pragma comment(linker, "/STACK:128777216")
/*
 * Строка, увеличивающая размер стека функций
 * На самом деле довольно полезная вещь, при реализации рекурсий
 * !!! Очень частым при больших данных является момент, когда размер изначального стека 
 (в который складываются все данные о функциях) переполняется
 * Такая ситуация вызывает Runtime Error (stack overflow)
*/
#define _USE_MATH_DEFINES
/*
 * В данном случае мы подключаем большую библиотеку математических констант
 * Для вас это ограничится такой константой, как M_PI - числом pi с наибольшой точностью для типа double
*/
#define _CRT_SECURE_NO_WARNINGS
/*
 * Если у вас произойдёт ситуация, в которой вы при работе с Visual Studio столкнётесь с 
 определёнными "небезопасными" функциями из языка C
 * Обычно в этом случае произойдёт ошибка (но только в рамках Visual Studio - в других её попросту нет), 
 связанная с безопасностью
 * Данная же строчка отключит предупреждение и позволит запускать код с данными функциями
 * В основном это связано с scanf, printf, freopen и gets 
 (Visual Studio предложит "безопасные" функции с суффиксом _s)
*/
 
/* !!! Строки выше важно реализовывать перед подключением библиотек 
(т.к. иначе библиотеки начнут работать с дефолтными параметрами) */
{% endhighlight %}
{% highlight cpp %}
#include <iostream>
/*
 * Iostream - хранилище всех функций ввода/вывода, 
 без его подключения для работы с вводом/выводом придётся собирать всё "по кускам"
 * Например, stdio.h - там хранятся scanf/printf, но для удобства iostream подключит их за вас
*/
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
/*
 * Данные библиотеки - набор структур данных, без которых придётся довольно туго
 * string - подключение работы с типом данных строки (бывают ситуации, что Visual Studio компилирует код работы со строками без подключения библиотеки - но будут возникать не предвиденные ошибки)
 * vector - динамический массив, с расширением справа
 * queue - структура "очередь", позволяет работать только с первым элементом, добавление в конец, удаление спереди
 * Библиотека queue также хранит структуру "очередь с приоритетом", она же priority_queue.
 * Очередь с приоритетом позволяет за O(logn) на операцию достать первый элемент и добавить в конец такую операцию, как "поддерживание приоритета" - это значит, что первый элемент будет "самым приоритетным", как пример - наибольшее число
 * stack - структура "стек", позволяет работать только с последним элементом, добавляет и удаляет из конца
 * deque - структура "дек", умеет работать, также как и vector, но ещё и имеет возможность эффективно добавлять/удалять спереди
 * set - структура "бинарное дерево поиска", с возможностью добавлять/удалять/находить элемент за O(logn)
 * map - структура "ассоциативный массив", построенный на той же основе, что и set, используя это с ключом
 * Добавляет, удаляет, изменяет и находит элемент (имеется ввиду ключ) за O(logn)
 * unordered_set - структура "хэш-таблица", что в теории позволяет делать добавление, удаление и поиск за O(1)
 * unordered_map - аналогичный ассоциативный массив, построенный на хэш-таблице
 * !!! Несмотря на то, что хэш-таблица звучит привлекательней, это обман - идеальных хэшей не существует
 * !!! Как следствие - скорость работы может падать из-за появления коллизий (хэши двух объектов совпадают, а сами они различны)
 * !!! Кроме того, для решения первой проблемы, таблица умеет перестраиваться, но этот процесс довольно затратный, из-за чего делается при превышении определённых пределов
 * !!! Поэтому использование хэш-таблиц может быть не оправданным (например, при большом количестве операций с похожими объектами)
 * !!! Однако лучшее их применение - при работе со строками, т.к. сравнение строк - операция, что очень легко может уничтожить время
*/
#include <algorithm>
/* Одним словом - данная библиотека - кладезь различных функций, которые могут вам понадобится
 * Например, операция сортировки
 * Но, на самом деле, много вещей оттуда можно реализовать и самому (что в рамках ограниченного времени будет излишним)
*/
#include <math.h>
#include <cmath>
/* Если вам нужны математические функции и константы - данные библиотеки должны быть под рукой */
#include <climits>
/* Если неожиданно понадобились константы, которые связаны с языком C/C++ (например INT_MAX), то вам сюда */
#include <ctime>
#include <random>
/*
 * Две специфические библиотеки, 
 которые на практике нужны лишь для стресс-тестирования, однако стоит о них рассказать
 * Первая библиотека - позволяет вытягивать значения времени 
 (например, с её помощью можно вычислить время работы программы)
 * Вторая же полностью посвящена псведослучайным генераторам
 * Самое важное, что может быть оттуда - класс mt19937 - генератор псевдослучайных чисел, 
 который позволяет генерировать любые случайные числа (rand же на самом деле работает только в рамках константы RAND_MAX, что не превышает тип short, чего бывает мало)
 * Причём этот генератор ещё и качественный - он проходит тесты diehard, которые являются одними из трудных
{% endhighlight %}
